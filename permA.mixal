* MIX Assembly Language, GNU MDK 1.2.9
*
* Program to multiply permutations in cycle form
* Algorithm A in Knuth 1.3.3

CBUF    EQU     100     points to start of current buffer
TABLE   EQU     200     store cycles to be multiplied
BUF1    EQU     500     two buffers for writing output
BUF2    EQU     525
BUFLEN  EQU     15      offset for last cell of each buffer
TERM    EQU     19      output
*
*
        ORIG    3000
START   NOP
* set current output buffer
        ENTA    =500=
        STA     CBUF
* use I1 for offset in table of permutation data,
* I2 for offset in current output buffer,
* I3 for offset in current word of output buffer
        ENT1    0
        ENT2    0
* copy current cell from table to output buffer
2H      LDA     TABLE,1
        CMPA    =0=     see if we are at the end of the data
        JE      6F
        STA     CBUF,2
        INC1    1
        INC2    1
        CMP2    BUFLEN  see if we are at the end of current buffer
        JE      4F
        JSJ     2B
* flush current buffer, switch to other buffer
4H      OUT     CBUF(TERM)
        LDA     CBUF + BUFLEN
        STA     CBUF
        ENT2    =0=
        JSJ     2B
* write final character, flush current buffer, end
6H      STA     CBUF,2
        OUT     CBUF(TERM)
        HLT
* initialize output buffers,
* last cell in each buffer points to other buffer
        ORIG    BUF1 + BUFLEN
        CON     BUF2
        ORIG    BUF2 + BUFLEN
        CON     BUF1
* initialize table using sample data (acf)(bd)(abd)(ef) for now
        ORIG    TABLE
        CON     42
        CON     1
        CON     3
        CON     6
        CON     43
        CON     42
        CON     2
        CON     4
        CON     43
        CON     42
        CON     1
        CON     2
        CON     4
        CON     43
        CON     42
        CON     5
        CON     6
        CON     43
        CON     0       mark end of table
        END     START
